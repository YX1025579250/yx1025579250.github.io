<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于hexo-abbrlink小插件的一点事</title>
    <url>/p/18eb876d/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    这两天一直在折腾Hexo+GitHub Page搭建个人博客，看了挺多其他大佬的优化指南。但我本人比较懒，一些复杂的设置暂时没精力去搞，一些花里胡哨的设置也不想弄，毕竟GitHub Page本身访问就不快，再加些花里胡哨的，怕是页面加载就要好久，但是其中有个插件我觉得还是有点意思的，就是<strong>hexo-abbrlink</strong>，这里就分享一下吧。</p>
<a id="more"></a>

<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>​    <strong>hexo-abbrlink</strong>这个插件是用来做什么的呢？我们都知道，hexo默认的文件访问路径是以年/月/日/标题来命名的，我个人不是很喜欢这种命名方式，第一、会创建很多个文件夹；第二、路径中会有中文。如果对这两点都不在乎，觉得hexo的默认路径命名规则可以接受的，就可以不用往下看了。</p>
<p>​    针对这个问题，早就有人觉得不爽，并且开发出了解决办法，<a href="https://segmentfault.com/a/1190000005799711" target="_blank" rel="noopener">这是开发者的心路历程</a>，里面详细介绍了安装，使用，很快就能上手。但根据里面的操作步骤安装完成后，npm会报出<strong>“1 vulnerability required manual review and could not be updated”</strong>，这个问题着实困扰了我一天，因为没学过Nodejs，之前没用过npm，对这个问题一头雾水。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>​    经过一天的不断查询各种资料，我终于知道了出现这个问题的原因，大概是依赖包的版本的太低，会出现<strong>“Regular Expression Denial of Service”</strong>这个问题，这个问题具体是什么自行Google，和我们要如何解决没有关系。会出现这个问题是因为<strong>hexo-abbrlink</strong>的开发者最后一次更新是在一年多以前，而这一年多的时间里，<strong>hexo-abbrlink</strong>依赖的两个插件包已经更新了，更新的插件包已经解决了这个问题，我们只需要更新一下依赖包就可以了。因为原作者似乎已经没有在维护这个插件了，我们只能自行更新依赖包。</p>
<h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><p>​    我们去看一下插件的源码，主要逻辑放在<strong>“logic.js”</strong>里，关于依赖的两个包<strong>“hexo-front-matter”</strong>和<strong>“hexo-fs”</strong>仅仅只是用到了其中<strong>“parse()”</strong>和<strong>“writeFileSync()”</strong>这两个函数。去查一下GitHub上这两个包的使用说明，似乎这两个函数现在版本还是能继续使用的，所以我们的任务仅仅只需要更改一下插件依赖包的版本，让其依赖于新版本就可以了。<del>其实我个人研究了一上午的代码，最后才发现不需要改代码，仅仅只需要改依赖就好了QAQ</del></p>
<p>​    npm更新包的依赖这个问题，我又查了好久的资料，现在版本的npm似乎会生成<strong>“package.json”</strong>和<strong>“package-lock.json”</strong>两个文件。关于这两个文件是干什么的，有什么用，请自行Google，这里不再赘述。我们需要进入<strong>node_modules</strong>目录，找到<strong>hexo-abbrlink</strong>文件夹，找到其中的<strong>“package.json”</strong>文件，将<strong>“dependencies”</strong>属性改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo-front-matter&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-fs&quot;: &quot;^2.0.0&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>其中版本号改成最新版就行了。</p>
<p>改完保存文件，把<strong>“package-lock.json”</strong>文件删了，在当前目录下运行Git bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure>

<p>最后在博客根路径，就是hexo的安装路径下，把<strong>“package-lock.json”</strong>文件删了，运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>

<p>OK，这样再运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm audit</span><br></pre></td></tr></table></figure>

<p>检查就不会出现<strong>“1 vulnerability required manual review and could not be updated”</strong>问题了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    这两天的各种折腾，总算是大概把博客的雏形弄好了，以后应该会专注于内容的书写记录，而不是在去折腾博客本身了。因为目前版本对我来说已经足够使用了，我的需求很简单：可以记录我的一些东西，足够简洁。一些花里胡哨的功能我也不想加，以后如果真的有什么需求，到那个时候再继续去折腾吧。</p>
<p>​    这两天我觉得我个人还是学到了一点东西的，虽然没有系统学习，都是挺碎片化的知识，例如js、npm的一点小知识。接下来应该会回归JAVA的整体学习，继续加油吧。</p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/p/d95d7e09/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    这是本人第一次写博客，也是第一次接触Markdown语法，在这第一篇博客里，我也不想就写个Hello World!就结束了。所以，这里简单记录一点Markdown的基本语法吧。</p>
<a id="more"></a>

<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><ul>
<li><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3></li>
</ul>
<p>要加粗的文字左右分别用两个*号包起来</p>
<ul>
<li><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3></li>
</ul>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<ul>
<li><h3 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h3></li>
</ul>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<ul>
<li><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3></li>
</ul>
<p>要加删除线的文字左右分别用两个~~号包起来</p>
<h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p>
<p>示例：</p>
<blockquote>
<p>引用内容</p>
<blockquote>
<p>引用内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>引用内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。</p>
<hr>
<hr>
<hr>
<hr>
<h2 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 <span class="string">"图片title"</span>)</span><br></pre></td></tr></table></figure>

<p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p>
<h2 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6.超链接"></a>6.超链接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">"超链接title"</span>)</span><br></pre></td></tr></table></figure>
<p>title可加可不加</p>
<p><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p>
<p><a href="https://www.baidu.com" target="_blank">百度</a></p>
<h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><h4 id="无序列表用-任何一种都可以"><a href="#无序列表用-任何一种都可以" class="headerlink" title="无序列表用 - + * 任何一种都可以"></a>无序列表用 - + * 任何一种都可以</h4><ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<h4 id="有序列表用数字加点表示"><a href="#有序列表用数字加点表示" class="headerlink" title="有序列表用数字加点表示"></a>有序列表用数字加点表示</h4><ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h4 id="列表嵌套：上一级和下一级之间敲三个空格即可"><a href="#列表嵌套：上一级和下一级之间敲三个空格即可" class="headerlink" title="列表嵌套：上一级和下一级之间敲三个空格即可"></a>列表嵌套：上一级和下一级之间敲三个空格即可</h4><ul>
<li><p>一级</p>
<ul>
<li>二级</li>
<li>二级</li>
</ul>
</li>
<li><p>一级</p>
<ol>
<li>二级</li>
<li>二级</li>
<li>二级</li>
</ol>
</li>
</ul>
<ol>
<li><p>一级</p>
<ul>
<li>二级</li>
<li>二级</li>
<li>二级</li>
</ul>
</li>
<li><p>一级</p>
<ul>
<li>二级</li>
<li>二级</li>
<li>二级</li>
</ul>
</li>
</ol>
<h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<h2 id="9-代码"><a href="#9-代码" class="headerlink" title="9.代码"></a>9.代码</h2><p>单行代码：代码之间分别用一个反引号包起来</p>
<p><code>代码内容</code></p>
<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码···</span><br><span class="line">代码···</span><br><span class="line">代码···</span><br></pre></td></tr></table></figure>

<h2 id="10-流程图"><a href="#10-流程图" class="headerlink" title="10.流程图"></a>10.流程图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">op&#x3D;&gt;operation: My Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>

<p>GitHub Page似乎不支持流程图显示，所以页面上直接显示代码块了QAQ</p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
